name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - uses: actions/checkout@v3

      # 2. JDK 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # 3. REDIS, JWT, AES secrets를 환경 변수로 등록
      - name: Set up secrets as env variables
        run: |
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> $GITHUB_ENV
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> $GITHUB_ENV
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> $GITHUB_ENV
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "AES_SECRET=${{ secrets.AES_SECRET }}" >> $GITHUB_ENV
          echo "EUREKA_NAME=${{ secrets.EUREKA_NAME }}" >> $GITHUB_ENV
          echo "EUREKA_PASSWORD=${{ secrets.EUREKA_PASSWORD }}" >> $GITHUB_ENV

      # 4. test 환경에서 사용할 .env 파일 생성
      - name: Create test .env file
        run: |
          mkdir -p ./src/test/resources
          echo "REDIS_HOST=${{ secrets.TEST_REDIS_HOST }}" >> ./src/test/resources/.env
          echo "REDIS_PORT=${{ secrets.TEST_REDIS_PORT }}" >> ./src/test/resources/.env
          echo "REDIS_PASSWORD=${{ secrets.TEST_REDIS_PASSWORD }}" >> ./src/test/resources/.env

      - name: Set correct file permissions for .env
        run: chmod 644 ./src/test/resources/.env

      # 5. application.properties 파일 생성
      - name: Generate application.properties
        run: |
          mkdir -p ./src/main/resources
          echo "redis.host=$REDIS_HOST" > ./src/main/resources/application-release.properties
          echo "redis.port=$REDIS_PORT" >> ./src/main/resources/application-release.properties
          echo "redis.password=$REDIS_PASSWORD" >> ./src/main/resources/application-release.properties
          echo "jwt.secret=$JWT_SECRET" >> ./src/main/resources/application-release.properties
          echo "aes.secret=$AES_SECRET" >> ./src/main/resources/application-release.properties
          echo "spring.security.user.name=$EUREKA_NAME" >> ./src/main/resources/application-release.properties
          echo "spring.security.user.password=$EUREKA_PASSWORD" >> ./src/main/resources/application-release.properties

      # 6. Maven 빌드
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # 7. 테스트 후 .env 파일 삭제
      - name: Delete test .env file
        run: |
          rm -f ./src/test/resources/.env

      # 8. SCP를 통해 파일 업로드
      - name: upload file
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_ID }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "target/*.jar"
          target: "~/"
          rm: false

      # 9. 원격 서버에서 셸 스크립트 실행
      - name: execute shell script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_ID }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script_stop: true
          script: startup/authServiceStartup.sh

      # 10. Redis 연결 테스트
      - name: Test Redis connection
        run:
          echo "PING" | redis-cli -h ${{ secrets.REDIS_HOST }} -p ${{ secrets.REDIS_PORT }} -a ${{ secrets.REDIS_PASSWORD }}
